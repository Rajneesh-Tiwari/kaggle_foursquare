import numpy as np


def reduce_mem_usage(df, verbose=1):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage().sum() / 1024**2

    for col in df.columns:
        col_type = df[col].dtype
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)

    if verbose:
        end_mem = df.memory_usage().sum() / 1024**2
        print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))
        print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))

    return df


def convert_to_dtypes(df, dtypes):
    for col in df.columns:
        try:
            t = dtypes[col]
        except KeyError:
            continue
        if df.dtypes[col].__str__() == "category":
            df[col] = np.clip(df[col].astype(int), np.iinfo(t).min, np.iinfo(t).max).astype(t)
        elif t != df.dtypes[col]:
            if "float" in t.__str__():
                df[col] = np.clip(df[col], np.finfo(t).min, np.finfo(t).max).astype(t)
            else:
                df[col] = np.clip(df[col], np.iinfo(t).min, np.iinfo(t).max).astype(t)

    return df


DTYPES_1 = {
    "id_1": np.dtype("O"),
    "id_2": np.dtype("O"),
    "dist": np.dtype("int32"),
    "dist1": np.dtype("int32"),
    "dist2": np.dtype("int32"),
    "country": np.dtype("int32"),
    "cat2a": np.dtype("int32"),
    "cat2b": np.dtype("int32"),
    "name_pi1": np.dtype("int8"),
    "name_lcs2": np.dtype("int8"),
    "name_lcs": np.dtype("int8"),
    "name_pi1_r1": np.dtype("float16"),
    "name_lcs2_r1": np.dtype("float16"),
    "name_lcs2_r2": np.dtype("float16"),
    "name_lcs_r1": np.dtype("float16"),
    "name_lcs_r2": np.dtype("float16"),
    "name_r3": np.dtype("float16"),
    "name_lcs_r4": np.dtype("float16"),
    "categories_pi1": np.dtype("int8"),
    "categories_lcs2": np.dtype("int8"),
    "categories_lcs": np.dtype("int8"),
    "categories_pi1_r1": np.dtype("float16"),
    "categories_lcs2_r1": np.dtype("float16"),
    "categories_lcs2_r2": np.dtype("float16"),
    "categories_lcs_r1": np.dtype("float16"),
    "categories_lcs_r2": np.dtype("float16"),
    "categories_r3": np.dtype("float16"),
    "categories_lcs_r4": np.dtype("float16"),
    "address_pi1": np.dtype("int8"),
    "address_lcs2": np.dtype("int8"),
    "address_lcs": np.dtype("int8"),
    "address_pi1_r1": np.dtype("float16"),
    "address_lcs2_r1": np.dtype("float16"),
    "address_lcs2_r2": np.dtype("float16"),
    "address_lcs_r1": np.dtype("float16"),
    "address_lcs_r2": np.dtype("float16"),
    "address_r3": np.dtype("float16"),
    "address_lcs_r4": np.dtype("float16"),
    "city_NA": np.dtype("int8"),
    "address_NA": np.dtype("int8"),
    "phone_m10": np.dtype("int8"),
    "url_m5": np.dtype("int8"),
    "same_cat_simpl": np.dtype("int8"),
    "dist_r1": np.dtype("float16"),
    "dist_r2": np.dtype("float16"),
    "id_cc_min": np.dtype("int16"),
    "id_cc_max": np.dtype("int16"),
    "name_cc_min": np.dtype("int16"),
    "name_cc_max": np.dtype("int16"),
    "angular_distance_min": np.dtype("float16"),
    "angular_distance_l2_min": np.dtype("float16"),
    "same_state": np.dtype("float16"),
    "same_zip": np.dtype("float16"),
    "same_city": np.dtype("float16"),
    "name_len_diff": np.dtype("int8"),
    "name_levenshtein": np.dtype("float16"),
    "address_len_diff": np.dtype("int8"),
    "address_levenshtein": np.dtype("float16"),
    "url_len_diff": np.dtype("int8"),
    "url_levenshtein": np.dtype("float16"),
}


DTYPES_2 = {
    "id_1": np.dtype("O"),
    "id_2": np.dtype("O"),
    "dist": np.dtype("int32"),
    "dist1": np.dtype("int32"),
    "dist2": np.dtype("int32"),
    "country": np.dtype("int8"),
    "cat2a": np.dtype("int8"),
    "cat2b": np.dtype("int8"),
    "name_pi1": np.dtype("int8"),
    "name_lcs2": np.dtype("int8"),
    "name_lcs": np.dtype("int8"),
    "name_pi1_r1": np.dtype("float16"),
    "name_lcs2_r1": np.dtype("float16"),
    "name_lcs2_r2": np.dtype("float16"),
    "name_lcs_r1": np.dtype("float16"),
    "name_lcs_r2": np.dtype("float16"),
    "name_r3": np.dtype("float16"),
    "name_lcs_r4": np.dtype("float16"),
    "categories_pi1": np.dtype("int8"),
    "categories_lcs2": np.dtype("int8"),
    "categories_lcs": np.dtype("int8"),
    "categories_pi1_r1": np.dtype("float16"),
    "categories_lcs2_r1": np.dtype("float16"),
    "categories_lcs2_r2": np.dtype("float16"),
    "categories_lcs_r1": np.dtype("float16"),
    "categories_lcs_r2": np.dtype("float16"),
    "categories_r3": np.dtype("float16"),
    "categories_lcs_r4": np.dtype("float16"),
    "address_pi1": np.dtype("int8"),
    "address_pi1_r1": np.dtype("float16"),
    "address_lcs2_r1": np.dtype("float16"),
    "address_lcs2_r2": np.dtype("float16"),
    "address_lcs_r1": np.dtype("float16"),
    "address_lcs_r2": np.dtype("float16"),
    "address_r3": np.dtype("float16"),
    "city_NA": np.dtype("int8"),
    "address_NA": np.dtype("int8"),
    "phone_m10": np.dtype("int8"),
    "dist_r1": np.dtype("float16"),
    "dist_r2": np.dtype("float16"),
    "id_cc_min": np.dtype("int16"),
    "id_cc_max": np.dtype("int16"),
    "name_cc_min": np.dtype("int16"),
    "name_cc_max": np.dtype("int16"),
    "angular_distance_min": np.dtype("float16"),
    "angular_distance_l2_min": np.dtype("float16"),
    "same_state": np.dtype("float16"),
    "same_zip": np.dtype("float16"),
    "same_city": np.dtype("float16"),
    "name_len_diff": np.dtype("int8"),
    "name_levenshtein": np.dtype("float16"),
    "address_len_diff": np.dtype("int8"),
    "address_levenshtein": np.dtype("float16"),
    "url_len_diff": np.dtype("int8"),
    "url_levenshtein": np.dtype("float16"),
    "Nb_multiPoi_1": np.dtype("float32"),
    "Nb_multiPoi_2": np.dtype("float32"),
    "Nb_connect1": np.dtype("int16"),
    "Nb_connect2": np.dtype("int16"),
    "ratio_connect_multipoi1": np.dtype("float16"),
    "ratio_connect_multipoi2": np.dtype("float16"),
    "Nb_strong_connect": np.dtype("int16"),
    "ratio_strong_connect_multipoi1": np.dtype("float16"),
    "ratio_strong_connect_multipoi2": np.dtype("float16"),
    "cat_link_score": np.dtype("float16"),
    "cat_link_score_all": np.dtype("float16"),
    "mean_1": np.dtype("float16"),
    "mean_2": np.dtype("float16"),
    "q25_1": np.dtype("float16"),
    "q25_2": np.dtype("float16"),
    "q50_1": np.dtype("float16"),
    "q50_2": np.dtype("float16"),
    "q75_1": np.dtype("float16"),
    "q75_2": np.dtype("float16"),
    "q90_1": np.dtype("float16"),
    "q90_2": np.dtype("float16"),
    "q99_1": np.dtype("float16"),
    "q99_2": np.dtype("float16"),
    "cat_solo_score_1": np.dtype("float16"),
    "cat_solo_score_2": np.dtype("float16"),
    "freq_pairing_with_other_groupedcat_1": np.dtype("float16"),
    "freq_pairing_with_other_groupedcat_2": np.dtype("float16"),
    "mean_ratiodist_1": np.dtype("float32"),
    "mean_ratiodist_2": np.dtype("float32"),
    "mean_ratiodist_pair": np.dtype("float16"),
    "q25_ratiodist_1": np.dtype("float32"),
    "q25_ratiodist_2": np.dtype("float32"),
    "q25_ratiodist_pair": np.dtype("float32"),
    "q50_ratiodist_1": np.dtype("float32"),
    "q50_ratiodist_2": np.dtype("float32"),
    "q50_ratiodist_pair": np.dtype("float16"),
    "q75_ratiodist_1": np.dtype("float32"),
    "q75_ratiodist_2": np.dtype("float32"),
    "q75_ratiodist_pair": np.dtype("float16"),
    "q90_ratiodist_1": np.dtype("float32"),
    "q90_ratiodist_2": np.dtype("float32"),
    "q90_ratiodist_pair": np.dtype("float16"),
    "q99_ratiodist_1": np.dtype("float32"),
    "q99_ratiodist_2": np.dtype("float32"),
    "q99_ratiodist_pair": np.dtype("float16"),
    "grouped_cat_link_score": np.dtype("float16"),
    "grouped_cat_link_score_all": np.dtype("float16"),
    "name_initial_cclcs": np.dtype("int8"),
    "name_initial_lllcs": np.dtype("int8"),
    "name_initial_lcs2": np.dtype("int16"),
    "name_initial_lcs": np.dtype("int16"),
    "name_initial_pi1": np.dtype("int8"),
    "name_initial_pi2": np.dtype("int8"),
    "name_initial_ld": np.dtype("int8"),
    "name_initial_ljw": np.dtype("float16"),
    "name_initial_dsm1": np.dtype("float16"),
    "name_initial_ll1": np.dtype("int8"),
    "name_initial_pi1_r1": np.dtype("float16"),
    "name_initial_pi2_r1": np.dtype("float16"),
    "name_initial_lcs2_r1": np.dtype("float16"),
    "name_initial_lcs2_r2": np.dtype("float16"),
    "name_initial_lcs_r1": np.dtype("float16"),
    "name_initial_lcs_r2": np.dtype("float16"),
    "name_initial_lllcs_r1": np.dtype("float16"),
    "name_initial_lllcs_r2": np.dtype("float16"),
    "name_initial_r3": np.dtype("float16"),
    "name_initial_lcs_r4": np.dtype("float16"),
    "name_initial_decode_cclcs": np.dtype("int8"),
    "name_initial_decode_lllcs": np.dtype("int8"),
    "name_initial_decode_lcs2": np.dtype("int8"),
    "name_initial_decode_lcs": np.dtype("int8"),
    "name_initial_decode_pi1": np.dtype("int8"),
    "name_initial_decode_pi2": np.dtype("int8"),
    "name_initial_decode_ld": np.dtype("int16"),
    "name_initial_decode_ljw": np.dtype("float16"),
    "name_initial_decode_dsm1": np.dtype("float16"),
    "name_initial_decode_ll1": np.dtype("int8"),
    "name_initial_decode_pi1_r1": np.dtype("float16"),
    "name_initial_decode_pi2_r1": np.dtype("float16"),
    "name_initial_decode_lcs2_r1": np.dtype("float16"),
    "name_initial_decode_lcs2_r2": np.dtype("float16"),
    "name_initial_decode_lcs_r1": np.dtype("float16"),
    "name_initial_decode_lcs_r2": np.dtype("float16"),
    "name_initial_decode_lllcs_r1": np.dtype("float16"),
    "name_initial_decode_lllcs_r2": np.dtype("float16"),
    "name_initial_decode_r3": np.dtype("float16"),
    "name_initial_decode_lcs_r4": np.dtype("float16"),
    "name_initial_decode_m5": np.dtype("int8"),
    "nameC_lllcs": np.dtype("int8"),
    "nameC_lcs2": np.dtype("int8"),
    "nameC_lcs": np.dtype("int8"),
    "nameC_pi1": np.dtype("int8"),
    "nameC_pi2": np.dtype("int8"),
    "nameC_ld": np.dtype("int8"),
    "nameC_ljw": np.dtype("float16"),
    "nameC_dsm1": np.dtype("float16"),
    "nameC_ll1": np.dtype("int8"),
    "nameC_pi1_r1": np.dtype("float16"),
    "nameC_pi2_r1": np.dtype("float16"),
    "nameC_lcs2_r1": np.dtype("float16"),
    "nameC_lcs2_r2": np.dtype("float16"),
    "nameC_lcs_r1": np.dtype("float16"),
    "nameC_lcs_r2": np.dtype("float16"),
    "nameC_lllcs_r1": np.dtype("float16"),
    "nameC_lllcs_r2": np.dtype("float16"),
    "nameC_r3": np.dtype("float16"),
    "name_cclcs": np.dtype("int8"),
    "name_lllcs": np.dtype("int8"),
    "name_pi2": np.dtype("int8"),
    "name_ld": np.dtype("int8"),
    "name_ljw": np.dtype("float16"),
    "name_dsm1": np.dtype("float16"),
    "name_ll1": np.dtype("int8"),
    "name_pi2_r1": np.dtype("float16"),
    "name_lllcs_r1": np.dtype("float16"),
    "name_lllcs_r2": np.dtype("float16"),
    "name_m5": np.dtype("int8"),
    "categories_pi2": np.dtype("int8"),
    "categories_ld": np.dtype("int8"),
    "categories_ljw": np.dtype("float16"),
    "categories_dsm1": np.dtype("float16"),
    "categories_ll1": np.dtype("int8"),
    "categories_pi2_r1": np.dtype("float16"),
    "categories_lllcs_r1": np.dtype("float16"),
    "categories_lllcs_r2": np.dtype("float16"),
    "address_pi2": np.dtype("int8"),
    "address_ld": np.dtype("int8"),
    "address_ljw": np.dtype("float16"),
    "address_dsm1": np.dtype("float16"),
    "address_ll1": np.dtype("int8"),
    "address_pi2_r1": np.dtype("float16"),
    "address_lllcs_r1": np.dtype("float16"),
    "url_lcs": np.dtype("int8"),
    "url_ld": np.dtype("int8"),
    "url_dsm1": np.dtype("float16"),
    "url_ll1": np.dtype("int8"),
    "url_lcs_r2": np.dtype("float16"),
    "url_r3": np.dtype("float16"),
    "city_lcs": np.dtype("int8"),
    "city_pi1": np.dtype("int8"),
    "city_ld": np.dtype("int8"),
    "city_ljw": np.dtype("float16"),
    "city_dsm1": np.dtype("float16"),
    "city_ll1": np.dtype("int8"),
    "city_lcs2_r1": np.dtype("float16"),
    "city_lcs2_r2": np.dtype("float16"),
    "city_r3": np.dtype("float16"),
    "state_ld": np.dtype("int8"),
    "state_ljw": np.dtype("float16"),
    "state_lcs2_r1": np.dtype("float16"),
    "state_lcs_r2": np.dtype("float16"),
    "state_r3": np.dtype("float16"),
    "state_lcs_r4": np.dtype("float16"),
    "state_NA": np.dtype("int8"),
    "zip_pi2": np.dtype("int8"),
    "zip_ljw": np.dtype("float16"),
    "zip_pi1_r1": np.dtype("float16"),
    "zip_lcs_r1": np.dtype("float16"),
    "zip_NA": np.dtype("int8"),
    "phone_lcs2": np.dtype("int8"),
    "phone_pi2": np.dtype("int8"),
    "phone_ljw": np.dtype("float16"),
    "phone_dsm1": np.dtype("float16"),
    "address_cc_min": np.dtype("int16"),
    "address_cc_max": np.dtype("int16"),
    "categories_cc_min": np.dtype("int16"),
    "city_cc_min": np.dtype("int16"),
    "city_cc_max": np.dtype("int16"),
    "state_cc_min": np.dtype("int16"),
    "zip_cc_min": np.dtype("int16"),
    "zip_cc_max": np.dtype("int16"),
    "phone_cc_min": np.dtype("int16"),
    "phone_cc_max": np.dtype("int16"),
    "city_group_cc_min": np.dtype("int16"),
    "city_group_cc_max": np.dtype("int16"),
    "state_group_cc_min": np.dtype("int16"),
    "state_group_cc_max": np.dtype("int16"),
    "word_c_cs": np.dtype("float16"),
    "word_n_cs": np.dtype("float16"),
    "id_cc_2K": np.dtype("int16"),
    "id_cc_1K": np.dtype("int16"),
    "id_cc_500": np.dtype("int16"),
    "id_cc_200": np.dtype("int16"),
    "id_cc_100": np.dtype("int16"),
    "id_cc_50": np.dtype("int16"),
    "id_cc_5K": np.dtype("int16"),
    "id_cc_cat_2K": np.dtype("int16"),
    "id_cc_cat_1K": np.dtype("int16"),
    "id_cc_cat_500": np.dtype("int16"),
    "id_cc_cat_200": np.dtype("int16"),
    "id_cc_cat_100": np.dtype("int16"),
    "id_cc_cat_50": np.dtype("int16"),
    "id_cc_cat_5K": np.dtype("int16"),
    "id_cc_simplcat_2K": np.dtype("int16"),
    "id_cc_simplcat_1K": np.dtype("int16"),
    "id_cc_simplcat_500": np.dtype("int16"),
    "id_cc_simplcat_200": np.dtype("int16"),
    "id_cc_simplcat_100": np.dtype("int16"),
    "id_cc_simplcat_50": np.dtype("int16"),
    "id_cc_simplcat_5K": np.dtype("int16"),
    "name_num": np.dtype("int16"),
    "address_num": np.dtype("int16"),
    "langs": np.dtype("int16"),
    "cat_simpl": np.dtype("int16"),
    "num_in_name": np.dtype("int8"),
    "nb_in_name": np.dtype("int8"),
    "ratio_in_name": np.dtype("float16"),
    "address_both_nan": np.dtype("uint8"),
    "address_any_nan": np.dtype("uint8"),
    "city_both_nan": np.dtype("uint8"),
    "city_any_nan": np.dtype("uint8"),
    "state_both_nan": np.dtype("uint8"),
    "state_any_nan": np.dtype("uint8"),
    "zip_both_nan": np.dtype("uint8"),
    "zip_any_nan": np.dtype("uint8"),
    "url_both_nan": np.dtype("uint8"),
    "url_any_nan": np.dtype("uint8"),
    "phone_both_nan": np.dtype("uint8"),
    "phone_any_nan": np.dtype("uint8"),
    "info_power_1": np.dtype("float16"),
    "info_power_2": np.dtype("float16"),
    "info_diff": np.dtype("float16"),
    "name_tf_idf_33_char_wb_sim": np.dtype("float16"),
    "address_tf_idf_33_char_wb_sim": np.dtype("float16"),
    "url_tf_idf_33_char_wb_sim": np.dtype("float16"),
    "name_wratio": np.dtype("float16"),
    "name_partial_ratio": np.dtype("float16"),
    "address_wratio": np.dtype("float16"),
    "address_partial_ratio": np.dtype("float16"),
    "url_wratio": np.dtype("float16"),
    "url_partial_ratio": np.dtype("float16"),
    "point_of_interest_1": np.dtype("O"),
    "fold_1": np.dtype("int8"),
    "point_of_interest_2": np.dtype("O"),
    "fold_2": np.dtype("int8"),
    "match": np.dtype("int8"),
}
